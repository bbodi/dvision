       |module tdesktop;
       |
       |import std.math;
       |
       |import tgroup;
       |import tscreen;
       |import tview;
       |import trect;
       |import tevent;
       |import tbackground;
       |import tpoint;
       |
       |class TDesktop : TGroup {
       |
       |        static char defaultBkgrnd = '\xB0';
       |        static char odefaultBkgrnd = '\xB0';
       |        static short cascadeNum;
       |        static TView lastView;
       |
       |        const dsktTileVertical=1, dsktTileHorizontal=0;
       |
       |        private TBackground background;
       |        private uint flagsOptions;
       |
0000000|        this(in TRect bounds ) {
0000000|                super(bounds);
0000000|                growMode = gfGrowHiX | gfGrowHiY;
       |                
0000000|                TScreen.setCursorPos( bounds.a.x , bounds.b.y );
0000000|                background = createBackground(getExtent());
0000000|                if (background !is null) {
0000000|                        insert(background);
       |                }
       |        }
       |
       |        TBackground createBackground(in TRect r) const {
0000000|                return new TBackground( r, defaultBkgrnd );
       |        }
       |
       |        override void shutDown() {
0000000|                background = null;
0000000|                TGroup.shutDown();
       |        }
       |
       |        static bool Tileable( in TView p ) {
0000000|                return (p.options & ofTileable) != 0 && (p.state & sfVisible) != 0 ;
       |        }
       |
       |        void cascade( in TRect r ) {
0000000|                TPoint min, max;
0000000|                cascadeNum = 0;
0000000|                forEach( &doCount, null );
0000000|                if( cascadeNum > 0 ) {
0000000|                        lastView.sizeLimits( min, max );
0000000|                        if( (min.x > r.b.x - r.a.x - cascadeNum) || 
0000000|                           (min.y > r.b.y - r.a.y - cascadeNum) )
0000000|                                tileError();
       |                        else {
0000000|                                cascadeNum--;
0000000|                                lock();
0000000|                                forEach( &doCascade, cast(void *)&r );
0000000|                                unlock();
       |                        }
       |                }
       |        }
       |
       |        static private void doCount( TView p, void * ) {
0000000|                if( Tileable( p ) ) {
0000000|                        cascadeNum++;
0000000|                        lastView = p;
       |                }
       |        }
       |        
       |        static private void doCascade( TView p, void *r ) {
0000000|                if( Tileable( p ) && cascadeNum >= 0 ) {
0000000|                        TRect NR = *cast(TRect *)r;
0000000|                        NR.a.x += cascadeNum;
0000000|                        NR.a.y += cascadeNum;
0000000|                        p.locate( NR );
0000000|                        cascadeNum--;
       |                }
       |        }
       |
       |        override void handleEvent(ref TEvent event) {
0000000|                if( (event.what == evBroadcast) && (event.message.command == cm.ReleasedFocus) ) {
       |                        // SET: Move the cursor away, hopefully we will have a status bar.
       |                        // Helps Braille Terminals to know the object lost the focus. 
0000000|                        TScreen.setCursorPos( origin.x , origin.y + size.y );
       |                }
0000000|                TGroup.handleEvent( event );
0000000|                if( event.what == evBroadcast && event.message.command == cm.UpdateCodePage &&
0000000|                   background ) { {
       |
       |                                //background.changePattern(TVCodePage.RemapChar(TDesktop.odefaultBkgrnd, (cast(ushort*)event.message.infoPtr)[0..256]));
       |                   }
       |                }
       |                
0000000|                if( event.what == evCommand ) {
0000000|                        if (event.message.command == cm.Next) {
0000000|                                if (valid(cm.ReleasedFocus))
0000000|                                        selectNext( false );
0000000|                        } else if (event.message.command == cm.Prev) {
0000000|                                if (valid(cm.ReleasedFocus))
0000000|                                        current.putInFrontOf( background );
       |                        } else {
0000000|                                return;
       |                        }
0000000|                        clearEvent( event );
       |                }
       |        }
       |
0000000|        uint getOptions() { return flagsOptions; }
0000000|        void setOptions(uint aFlags) { flagsOptions=aFlags; }
       |        
       |        void tile( in TRect r ) {
0000000|                numTileable =  0;
0000000|                forEach( &doCountTileable, null );
0000000|                if( numTileable > 0 ) {
       |                        // SET: This trick makes the partitions in the reverse order
0000000|                        if( getOptions() & dsktTileVertical )
0000000|                                mostEqualDivisors( numTileable, numRows, numCols );
       |                        else
0000000|                                mostEqualDivisors( numTileable, numCols, numRows );
0000000|                        if( ( (r.b.x - r.a.x)/numCols ==  0 ) || 
0000000|                           ( (r.b.y - r.a.y)/numRows ==  0) )
0000000|                                tileError();
       |                        else
       |                        {
0000000|                                leftOver = numTileable % numCols;
0000000|                                tileNum = numTileable - 1;
0000000|                                lock();
0000000|                                forEach( &doTile, cast(void *)&r );
0000000|                                unlock();
       |                        }
       |                }
       |        }
       |        
       |        void  tileError() {
       |        }
       |        
       |        // SET: TViews will ask us if that's good time to draw cursor changes
       |        override bool canShowCursor() const {
0000000|                return lockFlag ? false : true;
       |        }
       |        
       |        // SET: If nobody will recover the focus move the cursor to the status line
       |        override Command execView( TView p ) {
0000000|                Command ret = TGroup.execView(p);
0000000|                if (p && !current)
0000000|                        TScreen.setCursorPos(0, TScreen.screenHeight-1);
0000000|                return ret;
       |        }
       |
       |        private static uint iSqr( uint i ) {
0000000|                uint res1 = 2;
0000000|                uint res2 = i/res1;
0000000|                while( abs( res1 - res2 ) > 1 ) {
0000000|                        res1 = (res1 + res2)/2;
0000000|                        res2 = i/res1;
       |                }
0000000|                return res1 < res2 ? res1 : res2;
       |        }
       |
       |
       |        private static void mostEqualDivisors(int n, out int x, out int y) {
0000000|                int i = iSqr( n );
0000000|                if( n % i != 0 ) {
0000000|                        if( n % (i+1) == 0 ) {
0000000|                                i++;
       |                        }
       |                }
0000000|                if( i < (n/i) ) {
0000000|                        i = n/i;
       |                }
       |                
0000000|                x = n/i;
0000000|                y = i;
       |        }
       |        
       |        // SET: All to ints, they are the best type for any compiler
       |        static int numCols, numRows, numTileable, leftOver, tileNum;
       |        
       |        private static void doCountTileable( TView p, void * ) {
0000000|                if( Tileable( p ) )
0000000|                        numTileable++;
       |        }
       |        
       |        private static int dividerLoc( int lo, int hi, int num, int pos) {
0000000|                return cast(int)(cast(long)(hi-lo)*pos/cast(long)(num)+lo);
       |        }
       |        
       |        private static TRect calcTileRect( int pos, in TRect r ) {
0000000|                int x, y;
0000000|                TRect nRect;
       |                
0000000|                int d = (numCols - leftOver) * numRows;
0000000|                if( pos <  d ) {
0000000|                        x = pos / numRows;
0000000|                        y = pos % numRows;
       |                } else {
0000000|                        x = (pos-d)/(numRows+1) + (numCols-leftOver);
0000000|                        y = (pos-d)%(numRows+1);
       |                }
0000000|                nRect.a.x = dividerLoc( r.a.x, r.b.x, numCols, x );
0000000|                nRect.b.x = dividerLoc( r.a.x, r.b.x, numCols, x+1 );
0000000|                if( pos >= d ) {
0000000|                        nRect.a.y = dividerLoc(r.a.y, r.b.y, numRows+1, y);
0000000|                        nRect.b.y = dividerLoc(r.a.y, r.b.y, numRows+1, y+1);
       |                }
       |                else {
0000000|                        nRect.a.y = dividerLoc(r.a.y, r.b.y, numRows, y);
0000000|                        nRect.b.y = dividerLoc(r.a.y, r.b.y, numRows, y+1);
       |                }
0000000|                return nRect;
       |        }
       |        
       |        private static void doTile( TView p, void *lR )
       |        {
0000000|                if( Tileable( p ) ) {
0000000|                        TRect r = calcTileRect( tileNum, *cast(const TRect *)lR );
0000000|                        p.locate(r);
0000000|                        tileNum--;
       |                }
       |        }
       |}
..\d\tdesktop.d is 0% covered
