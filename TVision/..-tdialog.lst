       |module tdialog;
       |
       |import tview;
       |import twindow;
       |import tapplication;
       |
       |immutable ubyte[] cpDialog = [0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
       |                 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F];
       |
       |immutable TPalette palette1 = immutable(TPalette)( cpDialog );
       |immutable TPalette palette2 = immutable(TPalette)( null );
       |
       |class TDialog : TWindow {
       |
0000000|        this(in TRect bounds, string aTitle ) {
0000000|                super( bounds, aTitle, wnNoNumber );
0000000|                growMode = 0;
0000000|        flags = wfMove | wfClose;
       |        }
       |
       |        override ref immutable(TPalette) getPalette() const {
       |            // Avoid returning the palette if the dialog isn't inserted on the
       |            // desktop or the application. Example: a dialog inside another.
0000000|            if ( (owner is TApplication.deskTop) ||
0000000|                 (owner is TApplication.application) 
0000000|               ) return palette1;
0000000|            return palette2;
       |        }
       |
       |        override void handleEvent(ref TEvent event) {
0000000|            TWindow.handleEvent(event);
0000000|            switch (event.what) {
0000000|                case evKeyDown:
0000000|                    switch (event.keyDown.keyCode) {
0000000|                        case KeyCode.kbEsc:
0000000|                            event.what = evCommand;
0000000|                            event.message.command = cm.Cancel;
0000000|                            event.message.infoPtr = null;
0000000|                            putEvent(event);
0000000|                            clearEvent(event);
0000000|                            break;
0000000|                        case KeyCode.kbEnter:
0000000|                            event.what = evBroadcast;
0000000|                            event.message.command = cm.Default;
0000000|                            event.message.infoPtr = null;
0000000|                            putEvent(event);
0000000|                            clearEvent(event);
0000000|                            break;
0000000|                                        default:
0000000|                                                break;
       |                                }
0000000|                    break;
       |
0000000|                case evCommand:
0000000|                                if (event.message.command.someOfThem(cm.Ok, cm.Cancel, cm.Yes, cm.No)) {
0000000|                                        if( (state & sfModal) != 0 ) {
0000000|                                                endModal(event.message.command);
0000000|                                                clearEvent(event);
       |                                        }
       |                                }
0000000|                        default:
0000000|                                break;             
       |                }
       |        }
       |
       |        override bool valid( Command command ) {
0000000|            if( command == cm.Cancel )
0000000|                return true;
       |            else
0000000|                return TGroup.valid( command );
       |        }
       |
       |
       |}
..\tdialog.d is 0% covered
