       |module tevent;
       |
       |//import tview;
       |import teventqueue;
       |import tpoint;
       |import tgkey;
       |import codepage;
       |import tview;
       |
       |const ushort evMouseDown = 0x0001;
       |const ushort evMouseUp   = 0x0002;
       |const ushort evMouseMove = 0x0004;
       |const ushort evMouseAuto = 0x0008;
       |const ushort evKeyDown   = 0x0010;
       |const ushort evCommand   = 0x0100;
       |const ushort evBroadcast = 0x0200;
       |const ushort evMouseWheel = 0x0400;
       |const positionalEvents    = evMouse;
       |const focusedEvents       = evKeyboard | evCommand;
       |
       |
       |struct CharScanType {
       |        ubyte charCode;        // The character encoded in the application code page
       |        ubyte scanCode;
       |};
       |
       |struct KeyDownEvent {
       |        CharScanType charScan;
       |        KeyCode keyCode;        // Internal code, used for special keys (i.e. arrows)
       |        ushort shiftState;
       |        ubyte  raw_scanCode;
       |        uint charCode;       // The Unicode16 of the key when the driver is in
       |        // Unicode16 mode. 0xFFFF if no character is associated.
       |};
       |
       |struct MessageEvent {
       |        Command command;
       |        union
       |        {
       |                void *infoPtr;
       |                long infoLong;
       |                ushort infoWord;
       |                short infoInt;
       |                ubyte infoByte;
       |                char infoChar;
       |        };
       |};
       |
       |struct TEvent {
       |        int what;
       |        union
       |        {
       |                MouseEventType mouse;
       |                KeyDownEvent keyDown;
       |                MessageEvent message;
       |        };
       |
       |        void getMouseEvent() {
0000000|                TEventQueue.getMouseEvent( this );
       |        }
       |
       |        void getKeyEvent() {
0000000|                if (TGKey.kbhit()) {
0000000|                        TGKey.fillTEvent(this);
       |                        // SET: That's a special case, when the keyboard indicates the event
       |                        // is mouse up it means the keyboard forced an event in the mouse module.
0000000|                        if (what == evMouseUp) {
0000000|                                getMouseEvent();
       |                        }
       |                }
       |                else {
0000000|                        what=evNothing;
       |                }
       |        }
       |};
       |
       |
       |import tprogram;
       |void *message(T)( TView receiver, int what, Command command, T infoPtr) {
0000000|        if( receiver is null ) {
0000000|                receiver = TProgram.deskTop;
       |        }
0000000|        if (receiver is null) {
0000000|                return null;
       |        }
       |        
0000000|        TEvent event;
0000000|        event.what = what;
0000000|        event.message.command = command;
0000000|        event.message.infoPtr = cast(void*)infoPtr;
0000000|        receiver.handleEvent( event );
0000000|        if( event.what == evNothing )
0000000|                return event.message.infoPtr;
       |        else
0000000|                return null;
       |}
       |
       |void *messageToDesktop(T)( int what, Command command, T infoPtr) {
       |        return message(null, what, command, infoPtr);
       |}
       |
       |
       |/* Event masks */
       |
       |const ushort evNothing   = 0x0000;
       |const ushort evMouse     = 0x000f;
       |const ushort evKeyboard  = 0x0010;
       |const ushort evMessage   = 0xFF00;
       |
       |/* Mouse button state masks */
       |/* SET: Note that I redefined them to make it coherent with most UNIX systems
       |   where the left button is the first, the middle one the second, etc. But safe
       |   code shouldn't rely on it. */
       |const ushort mbLeftButton  = 0x01;
       |const ushort mbMiddleButton= 0x02;
       |const ushort mbRightButton = 0x04;
       |const ushort mbButton4     = 0x08;
       |const ushort mbButton5     = 0x10;
       |
       |struct MouseEventType {
       |        ubyte buttons;
       |        bool doubleClick;
       |        TPoint where;
       |};
       |
       |// This class is the base hardware interface with the mouse and shouldn't
       |// be used directly. You should use TMouse instead which is derived from
       |// it. That's why most members are protected.
       |// See thwmouse.cc
       |class THWMouse {
       |
       |        
       |public
       |        // This indicates how many buttons have the mouse. Is also used to determine
       |        // if the mouse is present, a value of 0 is mouse not available. See the
       |        // present() member.
       |        static ubyte buttonCount;
       |        // SET: Suspend sets buttonCount to 0 to disable the mouse. The default
       |        // resume behavior is to restore this value.
       |        static ubyte oldButtonCount;
       |        // SET: Just to avoid redundant calls
       |        static byte  visible;
       |        // SET: Data used to force an event externally
       |        static MouseEventType forcedME;
       |        static byte forced;
       |        static ubyte btBeforeForce;
       |        
       |        // SET: Moved to the protected section
       |        static bool handlerInstalled;
       |        static bool noMouse;
       |        // The following counter is incremented when the mouse pointer is updated
       |        // by the driver. Only useful when done asynchronically.
       |        static uint drawCounter; // volatile
       |
       |        static bool present() {
0000000|                return buttonCount != 0;
       |        }
       |
       |        void inhibit() {
0000000|                noMouse = true;
       |        }
       |
       |        /*****************************************************************************
       |  Function pointer members initialization
       |*****************************************************************************/
       |        
       |        static void  function() Show                               =&defaultShow;
       |        static void  function() Hide                               =&defaultHide;
       |        static void  function(int, int) setRange             =&defaultSetRange;
       |        static void  function(ref MouseEventType) GetEvent         =&defaultGetEvent;
       |        static void  function(uint, void function()) registerHandler    =&defaultRegisterHandler;
       |        static void  function() Suspend                            =&defaultSuspend;
       |        static void  function() Resume                             =&defaultResume;
       |        static int   function(int x, int y) drawMouse              =&defaultDrawMouse;
       |        
       |/*****************************************************************************
       |  Default behaviors for the members
       |*****************************************************************************/
       |        
       |        static void defaultShow() {
0000000|                visible = 1;
       |        }
       |        
       |        static void defaultHide() {
0000000|                visible=0;
       |        }
       |        
       |        static void defaultSuspend() {}
0000000|        static void defaultResume() { buttonCount=oldButtonCount; }
       |        static void defaultSetRange(int /*rx*/, int /*ry*/) {}
0000000|        static int  defaultDrawMouse(int /*x*/, int /*y*/) { return 0; }
       |        
       |        static void defaultRegisterHandler(uint, void function()) {}
       |        
       |        static void defaultGetEvent(ref MouseEventType me) {
0000000|                me.where.x = TEventQueue.curMouse.where.x;
0000000|                me.where.y = TEventQueue.curMouse.where.y;
0000000|                me.buttons = TEventQueue.curMouse.buttons;
0000000|                me.doubleClick=false;
       |        }
       |        
       |/*****************************************************************************
       |  Real members
       |*****************************************************************************/
       |        
0000000|        this() {
0000000|                resume();
       |        }
       |        
       |        ~this() {
0000000|                suspend();
       |        }
       |        
       |        static void show() {
0000000|                if (!present() || visible) return;
0000000|                Show();
       |        }
       |        
       |        static void hide() {
0000000|                if (!present() || !visible) return;
0000000|                Hide();
       |        }
       |        
       |        static void suspend() {
0000000|                if (!present())
0000000|                        return;
0000000|                if (visible)
0000000|                        Hide();
0000000|                oldButtonCount=buttonCount;
0000000|                buttonCount=0;
0000000|                Suspend();
       |        }
       |        
       |        static void resume() {
0000000|                if (present())
0000000|                        return;
0000000|                Resume();
0000000|                if (!visible)
0000000|                        Show();
       |        }
       |        
       |        static void forceEvent(int x, int y, int buttons) {
0000000|                forced = 0;
0000000|                if (TEventQueue.curMouse.where.x!=x || TEventQueue.curMouse.where.y!=y)
0000000|                        forced++;
0000000|                if (TEventQueue.curMouse.buttons!=buttons)
0000000|                        forced++;
0000000|                forcedME.where.x = x;
0000000|                forcedME.where.y = y;
0000000|                forcedME.doubleClick=false;
0000000|                btBeforeForce = forcedME.buttons;
0000000|                forcedME.buttons = cast(ubyte)buttons;
       |        }
       |        
       |        static void getEvent(ref MouseEventType me) {
0000000|                if (!present()) {
0000000|                        me = TEventQueue.curMouse;
0000000|                        return;
       |                }
0000000|                if (forced) {
0000000|                        me = forcedME;
0000000|                        if (forced == 2) {
0000000|                                me.buttons = btBeforeForce;
       |                        }
0000000|                        TEventQueue.curMouse = me;
0000000|                        drawMouse(forcedME.where.x,forcedME.where.y);
0000000|                        forced--;
0000000|                } else if (handlerInstalled) {
0000000|                        me = TEventQueue.curMouse;
       |                } else {
0000000|                        GetEvent(me);
0000000|                        TEventQueue.curMouse = me;
       |                }
       |        }
       |}
       |
       |// This class exposses the mouse interface.
       |class TMouse : THWMouse {
       |
0000000|        this()
       |        {
0000000|                show();
       |        }
       |        
       |        ~this()
       |        {
0000000|                hide();
       |        }
       |
       |        static void show()
       |        {
0000000|                THWMouse.show();
       |        }
       |
       |        static void hide()
       |        {
0000000|                THWMouse.hide();
       |        }
       |
       |        static void suspend()
       |        {
0000000|                THWMouse.suspend();
       |        }
       |
       |        static void resume()
       |        {
0000000|                THWMouse.resume();
       |        }
       |
       |        static void setRange(int rx, int ry) {
0000000|                THWMouse.setRange(rx,ry);
       |        }
       |
       |        static void getEvent(ref MouseEventType me)
       |        {
0000000|                THWMouse.getEvent(me);
       |        }
       |
       |        static void registerHandler(uint mask, void  function() func)
       |        {
0000000|                THWMouse.registerHandler(mask, func);
       |        }
       |
       |        static bool present()
       |        {
0000000|                return THWMouse.present();
       |        }
       |
       |        static void resetDrawCounter() {
0000000|                synchronized {
0000000|                        drawCounter=0;
       |                }
       |        }
       |
       |        static uint getDrawCounter() {
0000000|                synchronized {
0000000|                        return drawCounter;
       |                }
       |        }
       |}
       |/****************************************************************************************/
       |
       |
..\d\tevent.d is 0% covered
